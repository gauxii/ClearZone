{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Merin Varghese\\\\Desktop\\\\clearzone\\\\ClearZone\\\\frontend\\\\src\\\\components\\\\WorkerDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./WorkerDashboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WorkerDashboard() {\n  _s();\n  const [tasks, setTasks] = useState([{\n    id: 1,\n    location: \"Area A\",\n    status: \"Pending\"\n  }, {\n    id: 2,\n    location: \"Area B\",\n    status: \"Pending\"\n  }]);\n  const [workerName, setWorkerName] = useState(\"\");\n  const [selectedTask, setSelectedTask] = useState(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Load worker name if previously entered\n    const savedName = localStorage.getItem(\"workerName\");\n    if (savedName) {\n      setWorkerName(savedName);\n    }\n  }, []);\n  const acceptTask = id => {\n    if (!workerName) {\n      const name = prompt(\"Enter your name to accept the task:\");\n      if (!name) return;\n      setWorkerName(name);\n      localStorage.setItem(\"workerName\", name);\n    }\n\n    // Find the selected task and update the status\n    const updatedTasks = tasks.map(task => task.id === id && task.status === \"Pending\" ? {\n      ...task,\n      status: `Accepted by ${workerName}`\n    } : task);\n    setTasks(updatedTasks);\n    setSelectedTask(id);\n\n    // Save to local storage for admin to view\n    localStorage.setItem(\"acceptedTasks\", JSON.stringify(updatedTasks));\n  };\n  const proceedToUpload = () => {\n    navigate(\"/worker-upload\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"worker-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Worker Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Welcome, \", workerName || \"Worker\", \"!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), tasks.map(task => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uD83D\\uDCCD Location: \", task.location]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), task.status.startsWith(\"Accepted\") ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u2705 \", task.status]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => acceptTask(task.id),\n        disabled: task.status !== \"Pending\" // Disable if task is accepted\n        ,\n        children: \"Accept Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this)]\n    }, task.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)), selectedTask && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"proceed-button\",\n      onClick: proceedToUpload,\n      children: \"Proceed to Upload Cleaned Image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(WorkerDashboard, \"hK1BJcauBUHwalQ24ke9oa25dwU=\", false, function () {\n  return [useNavigate];\n});\n_c = WorkerDashboard;\nexport default WorkerDashboard;\nvar _c;\n$RefreshReg$(_c, \"WorkerDashboard\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","WorkerDashboard","_s","tasks","setTasks","id","location","status","workerName","setWorkerName","selectedTask","setSelectedTask","navigate","savedName","localStorage","getItem","acceptTask","name","prompt","setItem","updatedTasks","map","task","JSON","stringify","proceedToUpload","className","children","fileName","_jsxFileName","lineNumber","columnNumber","startsWith","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Merin Varghese/Desktop/clearzone/ClearZone/frontend/src/components/WorkerDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"./WorkerDashboard.css\";\r\n\r\nfunction WorkerDashboard() {\r\n  const [tasks, setTasks] = useState([\r\n    { id: 1, location: \"Area A\", status: \"Pending\" },\r\n    { id: 2, location: \"Area B\", status: \"Pending\" },\r\n  ]);\r\n  const [workerName, setWorkerName] = useState(\"\");\r\n  const [selectedTask, setSelectedTask] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    // Load worker name if previously entered\r\n    const savedName = localStorage.getItem(\"workerName\");\r\n    if (savedName) {\r\n      setWorkerName(savedName);\r\n    }\r\n  }, []);\r\n\r\n  const acceptTask = (id) => {\r\n    if (!workerName) {\r\n      const name = prompt(\"Enter your name to accept the task:\");\r\n      if (!name) return;\r\n      setWorkerName(name);\r\n      localStorage.setItem(\"workerName\", name);\r\n    }\r\n\r\n    // Find the selected task and update the status\r\n    const updatedTasks = tasks.map((task) =>\r\n      task.id === id && task.status === \"Pending\"\r\n        ? { ...task, status: `Accepted by ${workerName}` }\r\n        : task\r\n    );\r\n\r\n    setTasks(updatedTasks);\r\n    setSelectedTask(id);\r\n\r\n    // Save to local storage for admin to view\r\n    localStorage.setItem(\"acceptedTasks\", JSON.stringify(updatedTasks));\r\n  };\r\n\r\n  const proceedToUpload = () => {\r\n    navigate(\"/worker-upload\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"worker-dashboard\">\r\n      <h2>Worker Dashboard</h2>\r\n      <p>Welcome, {workerName || \"Worker\"}!</p>\r\n\r\n      {tasks.map((task) => (\r\n        <div key={task.id} className=\"task-card\">\r\n          <p>üìç Location: {task.location}</p>\r\n          {task.status.startsWith(\"Accepted\") ? (\r\n            <p>‚úÖ {task.status}</p>\r\n          ) : (\r\n            <button\r\n              onClick={() => acceptTask(task.id)}\r\n              disabled={task.status !== \"Pending\"} // Disable if task is accepted\r\n            >\r\n              Accept Task\r\n            </button>\r\n          )}\r\n        </div>\r\n      ))}\r\n\r\n      {/* Show Camera Button Only After Accepting Task */}\r\n      {selectedTask && (\r\n        <button className=\"proceed-button\" onClick={proceedToUpload}>\r\n          Proceed to Upload Cleaned Image\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorkerDashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}